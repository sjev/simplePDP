# 
# How it works
# ---------------
#
# decomposition is a tree starting from a single requirement and decomposing them into
# multiple requirements, until a requirement can be tranformed into design choice
# 
#  Workflow
# ----------
#  * start from the root requirement and decompose further, example below.
#    supported objects
#     - requrements = a list with separate requirements  
#     - decomposition = rationale on how to split to multiple requirements
#  * separate decomposition trees are separated by `---` separators
#  * extra files can be included with !include directive


# this is the TOP LEVEL requirement, everything should trace back to this one.
ROOT: | 
  To manage a coplex system design and validation, top-level requirements need
  to be decomposed to low level unit requirements. Each requirement should have a 
  design solution and validation.
  
requirements:
  
  A01: 
    req : I **want** requirements to be documented in a consistent, structural way.
    rationale : |
      A user (architect or designer) **needs** to manage requirements of a complex system.
      A good requirement management system has a set of high-level requirements  

  
  A02: 
    req: I **want** to track requirement history and create baselines
    requirements:
      R006:
        req: tool **must** have version control
        solution: S003
  
  A03:
    req: | 
      I **want** to spend as little time as possible on mechanical tasks, like
      formatting documents.
    requirements:
      R009:
        req: tool **must** generate requirement documents 
        requirements:
          R009a:  {req: tool **must** produce html output}
          R009b:  {req: tool **should** produce pdf}
      
      # here is an example on how to include a separate file
      R008: !include userFriendly.yml

  A04:
    req: I **want**  to know when all requirement dependencies are satisfied.
    rationale: Quick overview for requirement dependancy.
    #requirements:
  
  A05: 
    req: I **want** each requirement to be traceable
    requirements:
        R004:
            req : each requirement **must** have a unique identifier
            rationale : "needed to link requirements for traceablility"
            solution: S004
  A06: 
    req: I **want** an overview that shows ho high-level requirements match final low-level solutions
  
    
  A07:
    req: I **want** each requirement to have a clear status, from 'draft' to 'satisfied'
    rationale : | 
          requirements are defined and changed during development process.
          Usually a requirement goes through different stages from draft to 'validated' or 'satisfied'
    requirements:
      R003: 
        req : each requirement **must** have a status
        rationale : "typical workflow consists of setting status to 'draft/reviewed/confirmed' or similar."

  A08:
    req: I **want** the tool to check for requirment consistency
    requirements:
      R004a:
        req : tool **must** check identifiers for consistency
        rationale : "because identifiers are entered by hand, there is a chance of duplicate entries. these are not allowed"
        related: R008d

  A09:
    req: I **want** to easliy cooperate with others on writing requirement documents
    requirements:
      R007:
        req: tool **must** support multiple users
        solution: S003

  A10:
    req: I **want** to produce graphic charts visualizing requirement dependancy
    requirements :
      R008: 
        req: tool **must** print requirements in a tree structure
        solution: S005


# this section describes found solutions. These don't need to be cascading.
solutions:
  S001 : |
      each requirment has a default status, being 'draft'. A new status can be defined with
      keyword 'status'
  S002 : by using yaml data format, the user is encouraged to store data in a structured way
  S003 : | 
    by using plain text files and *git* version control, keeping track of changes is provided out of the box.
    git tags can be used for baselining the system.
  S004 : | 
    each requirement is assigned a unique key by the user. When extracting requirements, these
    will be sorted by their keys. This is unfortunately more labor-intensive than autonumbering,
    but ensures that requirement identifiers are consistent between baselines and intermediate
    versions.
  
  S005: |
    write trees as nested lists. Than use a little [css trick]( http://odyniec.net/articles/turning-lists-into-trees/)
  