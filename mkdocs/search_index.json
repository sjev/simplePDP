{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to simpleRM documentation\n\uf0c1\n\n\nThis documentation describes \nrequirements\n , \ndesign\n and \nvalidation\n of the \nsimpleRM\n tool\n\n\nIntroduction\n\uf0c1\n\n\nsimpleRM\n leverages several common technologies to satisfy the requirements of a good requirements manamgement tool.\n\n\n\n\nYAML\n - human friendly data serialization standard is used for data entry in any text editor\n\n\ngit ensures that all requirements are under version control\n\n\nMkDocs\n - produces beautiful, searchable documentation, ready for production\n\n\n\n\n\n\nNote\n\n\nrequirements\n , \ndesign\n and \nvalidation\n sections of this documentation have \nbeen created by the \nsimpleRM\n module itself, as an example of its usage.  \n\n\n\n\nDocumentation workflow\n\uf0c1\n\n\nCreating documentation for an engineering project typically requires these steps:\n\n\n\n\nEnter requirements and decomposition in yaml format.\n\n\nUse \nsimpleRM\n to parse data, check it for consistency and create markdown docs for \nrequirements.md\n, \nsolutions.md\n\n    and \nvalidation.md\n  \n\n\nEdit \ndocs/index.md\n to tie it all together\n\n\nBuild documentation with mkdocs",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-simplerm-documentation",
            "text": "This documentation describes  requirements  ,  design  and  validation  of the  simpleRM  tool",
            "title": "Welcome to simpleRM documentation"
        },
        {
            "location": "/#introduction",
            "text": "simpleRM  leverages several common technologies to satisfy the requirements of a good requirements manamgement tool.   YAML  - human friendly data serialization standard is used for data entry in any text editor  git ensures that all requirements are under version control  MkDocs  - produces beautiful, searchable documentation, ready for production    Note  requirements  ,  design  and  validation  sections of this documentation have \nbeen created by the  simpleRM  module itself, as an example of its usage.",
            "title": "Introduction"
        },
        {
            "location": "/#documentation-workflow",
            "text": "Creating documentation for an engineering project typically requires these steps:   Enter requirements and decomposition in yaml format.  Use  simpleRM  to parse data, check it for consistency and create markdown docs for  requirements.md ,  solutions.md \n    and  validation.md     Edit  docs/index.md  to tie it all together  Build documentation with mkdocs",
            "title": "Documentation workflow"
        },
        {
            "location": "/requirements/",
            "text": "Requirements tree\n\uf0c1\n\n\n\n\n \n \nA01\n     I \nwant\n requirements to be documented in a consistent, structural way.\n\n\n \n \nA02\n     I \nwant\n to track requirement history and create baselines\n\n\n \n \nR006\n     tool \nmust\n have version control\n\n\n\n\n\n\n \n \nA03\n     I \nwant\n to spend as little time as possible on mechanical tasks, like\nformatting documents.\n\n\n \n \nR008\n     tool \nmust\n be user-friendly and support \"traditional\" way of writing requrements.\n\n\n \n \nR008a\n     tool \nmust\n use plain text input\n\n\n \n \nR008b\n     tool \nmust\n enable cross referencing and structuring the requirements\n\n\n \n \nR008c\n     tool \nshould\n support comments\n\n\n \n \nR008d\n     tool \nshoud\n be able to check if an requirement identifier is available\n\n\n\n\n\n\n \n \nR009\n     tool \nmust\n generate requirement documents\n\n\n \n \nR009a\n     tool \nmust\n produce html output\n\n\n \n \nR009b\n     tool \nshould\n produce pdf\n\n\n\n\n\n\n \n \nR009c\n     tool \nshould\n produce 'skeleton' structures\n\n\n\n\n\n\n \n \nA04\n     I \nwant\n  to know when all requirement dependencies are satisfied.\n\n\n \n \nA05\n     I \nwant\n each requirement to be traceable\n\n\n \n \nR004\n     each requirement \nmust\n have a unique identifier\n\n\n\n\n\n\n \n \nA06\n     I \nwant\n an overview that shows ho high-level requirements match final low-level solutions\n\n\n \n \nA07\n     I \nwant\n each requirement to have a clear status, from 'draft' to 'satisfied'\n\n\n \n \nR003\n     each requirement \nmust\n have a status\n\n\n\n\n\n\n \n \nA08\n     I \nwant\n the tool to check for requirment consistency\n\n\n \n \nR004a\n     tool \nmust\n check identifiers for consistency\n\n\n\n\n\n\n \n \nA09\n     I \nwant\n to easliy cooperate with others on writing requirement documents\n\n\n \n \nR007\n     tool \nmust\n support multiple users\n\n\n\n\n\n\n \n \nA10\n     I \nwant\n to produce graphic charts visualizing requirement dependancy\n\n\n \n \nR011\n     tool \nmust\n print requirements in a tree structure\n\n\n\n\n\n\n\n\nLegend\n\uf0c1\n\n\n\n\n \n : check\n\n\n \n : arrow_right\n\n\n \n : conflict\n\n\n \n : handshake\n\n\n \n : requirement\n\n\n \n : solution\n\n\n\n\nDependencies\n\uf0c1\n\n\n\n\nDetailed list\n\uf0c1\n\n\n\n\n A01 \n I \nwant\n requirements to be documented in a consistent, structural way.\n\n Rationale:\n A user (architect or designer) \nneeds\n to manage requirements of a complex system.\nA good requirement management system has a set of high-level requirements \n\n\n Parent:\n \nROOT\n\n\n\n\n A02 \n I \nwant\n to track requirement history and create baselines\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n R006 \n tool \nmust\n have version control\n\n Rationale:\n None \n\n\n Parent:\n \nA02\n\n\n\n\n A03 \n I \nwant\n to spend as little time as possible on mechanical tasks, like\nformatting documents.\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n R008 \n tool \nmust\n be user-friendly and support \"traditional\" way of writing requrements.\n\n Rationale:\n None \n\n\n Parent:\n \nA03\n\n\n\n\n R008a \n tool \nmust\n use plain text input\n\n Rationale:\n None \n\n\n Parent:\n \nR008\n\n\n\n\n R008b \n tool \nmust\n enable cross referencing and structuring the requirements\n\n Rationale:\n None \n\n\n Parent:\n \nR008\n\n\n\n\n R008c \n tool \nshould\n support comments\n\n Rationale:\n None \n\n\n Parent:\n \nR008\n\n\n\n\n R008d \n tool \nshoud\n be able to check if an requirement identifier is available\n\n Rationale:\n None \n\n\n Parent:\n \nR008\n\n\n\n\n R009 \n tool \nmust\n generate requirement documents\n\n Rationale:\n None \n\n\n Parent:\n \nA03\n\n\n\n\n R009a \n tool \nmust\n produce html output\n\n Rationale:\n None \n\n\n Parent:\n \nR009\n\n\n\n\n R009b \n tool \nshould\n produce pdf\n\n Rationale:\n None \n\n\n Parent:\n \nR009\n\n\n\n\n R009c \n tool \nshould\n produce 'skeleton' structures\n\n Rationale:\n to avoid copy-pasting of previous documents. \n\n\n Parent:\n \nA03\n\n\n\n\n A04 \n I \nwant\n  to know when all requirement dependencies are satisfied.\n\n Rationale:\n Quick overview for requirement dependancy. \n\n\n Parent:\n \nROOT\n\n\n\n\n A05 \n I \nwant\n each requirement to be traceable\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n R004 \n each requirement \nmust\n have a unique identifier\n\n Rationale:\n needed to link requirements for traceablility \n\n\n Parent:\n \nA05\n\n\n\n\n A06 \n I \nwant\n an overview that shows ho high-level requirements match final low-level solutions\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n A07 \n I \nwant\n each requirement to have a clear status, from 'draft' to 'satisfied'\n\n Rationale:\n requirements are defined and changed during development process.\nUsually a requirement goes through different stages from draft to 'validated' or 'satisfied' \n\n\n Parent:\n \nROOT\n\n\n\n\n R003 \n each requirement \nmust\n have a status\n\n Rationale:\n typical workflow consists of setting status to 'draft/reviewed/confirmed' or similar. \n\n\n Parent:\n \nA07\n\n\n\n\n A08 \n I \nwant\n the tool to check for requirment consistency\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n R004a \n tool \nmust\n check identifiers for consistency\n\n Rationale:\n because identifiers are entered by hand, there is a chance of duplicate entries. these are not allowed \n\n\n Parent:\n \nA08\n\n\n\n\n A09 \n I \nwant\n to easliy cooperate with others on writing requirement documents\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n R007 \n tool \nmust\n support multiple users\n\n Rationale:\n None \n\n\n Parent:\n \nA09\n\n\n\n\n A10 \n I \nwant\n to produce graphic charts visualizing requirement dependancy\n\n Rationale:\n None \n\n\n Parent:\n \nROOT\n\n\n\n\n R011 \n tool \nmust\n print requirements in a tree structure\n\n Rationale:\n None \n\n\n Parent:\n \nA10",
            "title": "Requirements"
        },
        {
            "location": "/requirements/#requirements-tree",
            "text": "A01      I  want  requirements to be documented in a consistent, structural way.      A02      I  want  to track requirement history and create baselines      R006      tool  must  have version control        A03      I  want  to spend as little time as possible on mechanical tasks, like\nformatting documents.      R008      tool  must  be user-friendly and support \"traditional\" way of writing requrements.      R008a      tool  must  use plain text input      R008b      tool  must  enable cross referencing and structuring the requirements      R008c      tool  should  support comments      R008d      tool  shoud  be able to check if an requirement identifier is available        R009      tool  must  generate requirement documents      R009a      tool  must  produce html output      R009b      tool  should  produce pdf        R009c      tool  should  produce 'skeleton' structures        A04      I  want   to know when all requirement dependencies are satisfied.      A05      I  want  each requirement to be traceable      R004      each requirement  must  have a unique identifier        A06      I  want  an overview that shows ho high-level requirements match final low-level solutions      A07      I  want  each requirement to have a clear status, from 'draft' to 'satisfied'      R003      each requirement  must  have a status        A08      I  want  the tool to check for requirment consistency      R004a      tool  must  check identifiers for consistency        A09      I  want  to easliy cooperate with others on writing requirement documents      R007      tool  must  support multiple users        A10      I  want  to produce graphic charts visualizing requirement dependancy      R011      tool  must  print requirements in a tree structure",
            "title": "Requirements tree"
        },
        {
            "location": "/requirements/#legend",
            "text": ": check     : arrow_right     : conflict     : handshake     : requirement     : solution",
            "title": "Legend"
        },
        {
            "location": "/requirements/#dependencies",
            "text": "",
            "title": "Dependencies"
        },
        {
            "location": "/requirements/#detailed-list",
            "text": "A01   I  want  requirements to be documented in a consistent, structural way.  Rationale:  A user (architect or designer)  needs  to manage requirements of a complex system.\nA good requirement management system has a set of high-level requirements    Parent:   ROOT    A02   I  want  to track requirement history and create baselines  Rationale:  None    Parent:   ROOT    R006   tool  must  have version control  Rationale:  None    Parent:   A02    A03   I  want  to spend as little time as possible on mechanical tasks, like\nformatting documents.  Rationale:  None    Parent:   ROOT    R008   tool  must  be user-friendly and support \"traditional\" way of writing requrements.  Rationale:  None    Parent:   A03    R008a   tool  must  use plain text input  Rationale:  None    Parent:   R008    R008b   tool  must  enable cross referencing and structuring the requirements  Rationale:  None    Parent:   R008    R008c   tool  should  support comments  Rationale:  None    Parent:   R008    R008d   tool  shoud  be able to check if an requirement identifier is available  Rationale:  None    Parent:   R008    R009   tool  must  generate requirement documents  Rationale:  None    Parent:   A03    R009a   tool  must  produce html output  Rationale:  None    Parent:   R009    R009b   tool  should  produce pdf  Rationale:  None    Parent:   R009    R009c   tool  should  produce 'skeleton' structures  Rationale:  to avoid copy-pasting of previous documents.    Parent:   A03    A04   I  want   to know when all requirement dependencies are satisfied.  Rationale:  Quick overview for requirement dependancy.    Parent:   ROOT    A05   I  want  each requirement to be traceable  Rationale:  None    Parent:   ROOT    R004   each requirement  must  have a unique identifier  Rationale:  needed to link requirements for traceablility    Parent:   A05    A06   I  want  an overview that shows ho high-level requirements match final low-level solutions  Rationale:  None    Parent:   ROOT    A07   I  want  each requirement to have a clear status, from 'draft' to 'satisfied'  Rationale:  requirements are defined and changed during development process.\nUsually a requirement goes through different stages from draft to 'validated' or 'satisfied'    Parent:   ROOT    R003   each requirement  must  have a status  Rationale:  typical workflow consists of setting status to 'draft/reviewed/confirmed' or similar.    Parent:   A07    A08   I  want  the tool to check for requirment consistency  Rationale:  None    Parent:   ROOT    R004a   tool  must  check identifiers for consistency  Rationale:  because identifiers are entered by hand, there is a chance of duplicate entries. these are not allowed    Parent:   A08    A09   I  want  to easliy cooperate with others on writing requirement documents  Rationale:  None    Parent:   ROOT    R007   tool  must  support multiple users  Rationale:  None    Parent:   A09    A10   I  want  to produce graphic charts visualizing requirement dependancy  Rationale:  None    Parent:   ROOT    R011   tool  must  print requirements in a tree structure  Rationale:  None    Parent:   A10",
            "title": "Detailed list"
        }
    ]
}